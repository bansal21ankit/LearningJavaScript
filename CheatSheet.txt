+*DRY and CamelCase*+
* DRY is fundamental practice to not repeat the code we already wrote.
* CamelCase is variable name writing method so that to separate out two different words by only Capital Letter.

+*Type Coercion*+
* Conversion of variable data type within a statement to other type.

+*Variable Mutation*+
* Changing the value/type of variable after its decleration.

+*Operator precedence*+
* Higher precedence is solved first.
Link : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

+*Control Statements (if/else)*+
* If, Else If, Else
* Switch

+*Equals and Comparison operator*+
* == is the equals operator that ignores the data type while checking whether the two variables are equal or not. This internally performs Type Coercion.
* === is the comparison operator that simply check the type and the value of two variables. Doesn't perform any Type Coercion.

+*Boolean Logic*+
* AND (&&)
* OR (||)
* NOT (!)

+*Expression vs Statement*+
* Expression is used to produce some immediate product or store value in a variable.
* Statement is used to just perform some action.

+*Functions*+
* Can be declared as "function funName(parameterName1,..){}"
* Can be declared as "var funName = function(parameterName1,...){}"
* When calling function the values sent are called arguments
* Within function calls the values are called parameters

+*Arrays*+
* Indexing is 0 based.
* Can define using [] or new Array().
* Can contain mixture of data types.
* Data mutation is possible with variables.
* Arrays can contain primitive types, arrays or objects.
* Common methods (Methods are functions associated with some object):
** length : This is a property not actually method.
** push(x) : Add a value (i.e. x) in end.
** pop() : Removes the last value.
** unshift(x) : Add a value (i.e. x) in starting.
** shift() : Removes the first value.
** indexOf(x) : Returns index of value (i.e. x), if not found returns -1.

+*Objects*+
* Contains key:value pairs or properties separated by ,
* Can define using {} or new Object().
* Data mutation is possible in objects.
* Value can be accessed like object["key"] or object.key
* Objects can contain primitive types, arrays, objects or methods.
* Method Borrowing : Use one object's method and assign it to some other object.

+*Loops*+
* break; to break out of the complete loop.
* continue; to break the current iteration and start next iteration.

+*Execution Context*+
* Default (Global) execution context is the "window" context.
* All the code that is not in any function is executed in default context.
* When a function is accessed, it's own execution context is created and stacked on top of context stack.
* All the variables are associated with their own execution context.
* An execution context have following parts in the creation phase:
** Creation of Variable Object (VO) : Basis of "Hoisting"
** Creation of Scope Chain
** Determine value of 'this' variable

+*Hoisting*+
* Means, functions and variables are available even before execution phase.
* Hoisting works only with function statements/declerations "function abc(){}" not with function expressions "var abc = function(){}".
* Hoisting for variables only delares the variables but assign them "undefined" data-type before actual value is assigned to them.

+*Scope Chain*+
* Scope is space/environment created by functions in which its variables are accessible.
* Lexical scoping means a function defined within another function have the access to scope of parent function.
* Scope Chain means looking for variables in parents if not found in current scope, it doesn't work other way round.
* Scope Chain vs Execution Stack : SC is the order in which functions are written lexically, while ES is the order in which functions are called.

+*'this' keyword*+
* In a regular function call, 'this' always associate to 'window object' as that is the global/default context.
* Associativity of 'this' changes as soon as a new 'execution stack' is started using a 'method' (function of an object).
* 'this' is assigned a value only when 'object' calls a 'method'.

+*DOM and DOM Manipulation*+
* Document Object Model : This is a structural (fully object oriented) representation of HTML document.
* It is used to connect the HTML webpages with the scripts like JavaScript.
* JavaScript can access 'document object', interact/manipulate the DOM therefore the webpage.
* Selecting elements using 'document.querySelector()' we need '#' for id, '.' for class or directly use 'getElementById()'.
* Updating data within the elements use '.textContent' or '.innerHTML' along with 'document.querySelector()'.
* Changing the CSS using document object '.style.xxx' can be used along with 'document.querySelector()'.